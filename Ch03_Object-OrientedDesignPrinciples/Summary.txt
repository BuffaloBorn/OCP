INTERFACES
Points to RememberHere are some key rules about interfaces that will help you in the OCPJP 7 exam:

•	An interface cannot be instantiated.
•	An interface can extend another interface. Use the extends (and not the implements) keyword for this.
•	Interfaces cannot contain instance variables. If you declare a data member in an interface,
    it should be initialized, and all such data members are implicitly treated as “public static final” members.
•	An interface can declare static methods, instance methods and default methods.
•	You cannot declare members as protected or private. Only public access is allowed for members of an interface.
•	All methods declared in an interface are not implicitly considered to be abstract becouse it can be default.
    If you want, you can explicitly use the abstract qualifier for the method.
•   You can only declare abstract and define default and static methods in an interface.
•   An interface can be declared with empty body (i.e., an interface without any members. Such interfaces are known as tagging interfaces (or marker interfaces).
    Such interfaces are useful for defining a common parent, so that runtime polymorphism can be used. For example, java.util defines the interface EventListner without a body.
•	An interface can be declared within another interface or class; such interfaces are known as nested interfaces.
•	Unlike top-level interfaces that can have only public or default access, a nested interface can be declared as public, protected, or private.

COMPOSITION VS. INHERITANCE
•	A circle is-a shape.
•	A circle has-a point.
•	A laptop is-a computer.
•	A vector is-a list.
•   Class inheritance implies an is-a relationship, interface inheritance implies an is-like-a relationship, and composition implies a has-a relationship.
•   A rule of thumb is to use has-a and is-a phrases for composition and inheritance, respectively. For instance,A computer has-a CPU.
•   Use inheritance when a subclass specifies a base class, so that you can exploit dynamic polymorphism.
    In other cases, use composition to get code that is easy to change and loosely coupled. in summary, favor composition over inheritance.

Points to Remember
Here are some design principles and terminological nuances you should have under your belt when you take the OCPJP 7 exam:
•	Adhere to the OO design principle of “favor composition over inheritance.” Composition encourages you to follow another useful OO design principle:
    “program to an interface, not to an implementation.” This second injunction means that the functionality of a class should depend
    only on the interface of another abstraction and not on the specific implementation details of that abstraction.
    In other words, implementation of a class should not depend on the internal implementation aspects of the other class.
    Wherever suitable, composition is the technique of choice.
•	In OOP, there are many terms related to composition, such as association and aggregation. Association is the most general form of a relationship between two objects,
    whereas composition and aggregation are special forms of association. In general, the terms aggregation and composition are used interchangeably.
    Although these two terms are very similar, they do have a subtle difference. In composition, the lifetime of the contained object and the container object is the same,
    whereas that is not the case with aggregation. For example, a computer object and a CPU object share a composition relationship,
    while a library object and a book object share an aggregation relationship.

DESIGN PATTERNS
TYPES OF DESIGN PATTERNS
Broadly, GoF design patterns can be classified into the following three categories:
•	Creational patterns offer the flexibility to decide who is responsible for object creation, how the object will be created, which object will be created, and when the creation will take place.
    In essence, creational patterns provide an abstraction for object instantiation.
    examples: Singleton, Factory, Abstract Factory, and Prototype.
•	Structural patterns are focused on how related classes (and objects) are composed together to form a larger structure.
    examples: Composite, Decorator, Proxy, and Façade.
•	Behavioral patterns define the communication among the objects and control the flow within the participating objects.
    examples: Mediator, Chain of responsibility, Observer, State, and Strategy

