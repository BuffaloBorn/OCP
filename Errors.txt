ADVANCED CLASS DESIGN
* Autoboxing не работает для int->Double а для Integer->double работает
* Внимательнее смотреть на public методы в ананимных классах, особенно если они не определены у родетеля ;)
* Если предок имеет метод foo(T t) а потомок пытается определить метод foo(Object o) тогда получим compile time exception the same erasure, yet neither overrides the other.
* An empty catch block is not a good coding practice.
* sort order ->spaces < numbers < uppercase < lowercase
* 128 does not fit into a byte.
* You cannot override a static method with a non-static method and vice-versa.
  You can, however, redeclare a static method of a super interface as a default method in the sub interface.
* Remember that static method of an interface can only be accessed by using the name of that interface. i.e. Boiler.shutdown()
* А вот к статическим константам интерфейса через класс можно достучатся(если они не Ambiguous)
* Although, class B extends class A and 'i' is a protected member of A, B still cannot access i through a reference of type A because A's i does not belong to B or, in other words, B is not involved in the implementation of A. B can access i through a reference of type B or its subclass.
* An enum cannot be defined inside any method or constructor.
* Unlike a regular java class, you cannot access a non-final static field from an enum's constructor
* while(true){}; sout() is unreachable
* Overriding позволяет возвращать ковариантные типы, но это не отностится к примитивам
* When a programmer does not define ANY constructor, the compiler inserts one automatically, the access modifier of which is same as that of the class.
* static void test(ColoredPoint p, Point q) & static void test(Point p, ColoredPoint q) test(cp, cp); is ambiguous
* B class is inner class of A если вызвать в методе внутреннего класса B.this.x = this.x а A.this.x = A.this.x
* switch по енумам должен содержать только имена перечислений, без класса
* (String) new Object();
* Могут попытаться наебать с внутренними классами в вопросе по другому пункту
* перепутал if и switch
* switch требует break чтоб не проваливаться дальше
* local inner classes not allowed to have static members кроме static final variables
* нельзя делать static import по private классам, даже в том же классе


DESIGN PATTERNS AND PRINCIPLES
* A implements I - это тоже A is-a I
* Object composition requires class variable declared public to be used from the class from another package
* Singleton can manage a reusable cache of objects

GENERICS & COLLECTIONS
* subs = (TreeSet) s.subSet(326, true, 328, true );         subs.add(329); throws IllegalArgumentException
* Map.foreEach(BiConsumer)
* Так можно делать и дженерик будет можно модифицироватьCollection<E> returnValue = new ArrayList<E>();
* Map.computeIfAbsent(T, Function<T, V>) V
* Iterator of HashSet - Невозможно определить порядок
* Collection boolean	contains(Object o)
*** raw generic можно передавать или присваивать куда угодно
* List<? super RuntimeException> l = new ArrayList<Throwable>() создавать с любым родителем, а ложить только потомков
* Обратить внимание на Comparator в обратном порядке (b.compareTo(a))
* BinarySearch работает только когда список отсортирован в НАТУРАЛЬНОМ порядке или с соответственным компаратором
* Comparable is in the java.lang package
* Sort с null Comparator'ом сортирует в обычном порядке
* Collection.sort можно только Comparable or with external Comparator
* Внимательно когда используется одинаковое имя для Класса и Type Parameter
* Map<String, List<>> is wrong because of List<> being inside of another < and >. нельзя сдатавить diamond operator внутрь скобок
* Если метод возвращает List<? super E> то его нельзя кастонуть, только в List<? super E> или List<?> или List. public static <E extends CharSequence> List<? super E> doIt(List<E> nums)
* books.stream().sorted().forEach(b->System.out.println(b.getIsbn())); // упадет с ClassCastException если Books not implement Comparable
* Map позвляет хранить null в качестве ключа, а HashTable, ConcurrentHashMap нет.
* Map.put(K, V) возвращает предидущее значение или null.
* Map->SortedMap->NavigableMap
* FIFO has methods offer(e)/add(e)||peek()/element()||poll()/remove() for this purpose.
* LIFO has methods push(e)||peek()/element()||poll()/remove()/pop() for this purpose.
* Если работать с BlockingDeque с задержками то она может заблокироваться и результат будет неопределен
* если Map.merge вернет null тогда удаляется ключ, если ключ уже null или отсутствует, тогда просто ставит новое значение
* foo(T obj) и foo(Object o) -> ambiguous method

STREAMS
* toMap(K, V) - бросает Exception при дублировании ключа toMap(K, V, M)  - мерджит ключи toMap(K, V, M, S) - можно задать конкретную мапу
* Optional<String> grade = Optional.empty(); grade.of("FAIL"); - Это вызов статического метода
* Stream<Integer> strm2 = strm1.filter(i>5).filter(i<15); This will not compile because i>5 and i<15 are invalid lambda expressions.
* Predicate even = (Integer i)-> i%2==0; так нельзя, а так можно Predicate even =  i-> ((Integer)i)%2==0;
* Collectors.groupingBy() в лист пихает элементы
* findAny() может вернуть любое значение, хоть паралельно, хоть нет
* String s = Arrays.asList("a", "b", "c").parallelStream().reduce("_", String::concat) когда редуцирование выполняется паралельно, может получится такая фигня "_a_b_c"
* Collectors.counting() returns Long
* () -> exec.submit() не является Consumer<T>
** forEach method expects a Consumer as an argument. Not a Function.
* Collectors.groupingBy(Function<T, R> f) нельзя передать переменную Predicate типа, а лямбду предиката можно
* ()->{return null} incorrect lambda, becouse missing semicolon(;)
* в reduce() все параметры имеют один тип
* allMatch, noneMatch - Значение по умолчанию true, anyMatch - false
** Lambda can't redefine the local variable & parameter
* в partitioningBy(Predicate, Collector) Вторым параметром передается коллектор
* partitioningBy(Predicate) всегда возвращает мапу с двумя ключами, даже если стрим пустой
* UnaryOperator<Long> ex2 = (Long l) -> 3.14 //NOT COMPILE 3.14 is not a Long
* Stream.generate(() -> "A").sorted().limit(2).forEach(System.out::println); //Зависает потому что sorted() работает только с finit streams
* Functional interfaces can't declare checked exceptions
*** Streams can be used only one time!
** Stream.sum() is incorrect because IntStream.sum()
** IntStream.average() return optionalDouble
* Stream.iterate(1, x->x++) = 111111111..... инициализирующее значение передается в функцию

JAVA TIME
* 45m != 1h
* A Timezone of GMT+2 means that in that time zone, the time is 2 hours ahead of GMT. Thus, when it is 17:13 in GMT, it is 19:13 in GMT+2.
* Note that if the second date is before the first date, a minus sign is included in the output.
* Instant do not contains ZoneId(always in GMT)
* Instant можно создать только из ZonedDateTime (тот у кого есть зона)
* Перевод вперед 1:59 -> 3:00
* Перевод назад 1:59 -> 1:00
* Duration при создании сокращается до часов, минут, секунд...
* static methods like ofXXX() can not be chained

LOCALIZATION 85%
* String[] vals =  bungle.getStringArray("key2");
* Locale myLocale = Locale.getDefault();
* Java properties class can contain Object values
* Properties.get(String key) Properties.getProperty(String key [String default])
* ResourceBungle.getBungle("Bungle") - отработает с default Locale

EXCEPTIONS & ASSERTIONS 80%
* Throwable.getSuppressed().length == 0
* java -enablesystemassertions
* The type of the resource must be specified in the try itself. i.e. it should be: try(Statement stmt = c.createStatement())
* The auto-closeable variables defined in the try-with-resources statement are implicitly final. Thus, they cannot be reassigned.
* assert <boolean_expression> : <any_expression_but_void>;
* Input params of a public(NOT PRIVATE) method should not be validated using assertions.
* java -ea:... myPackage.myProgram enables assertions in the root package
* javac -source 1.3 Assertions.java позволяет использовать assert как идинтификатор
* assert is the reserved word, you cannot use it as a variable name;
* Могут подъебать с фигурными скобками в try{}{} вместо круглых
* if exception throws it must be declared of handled
* ParseException, IOException, FileNotFoundException, NotSerializableException, SQLException -- checked
* если поймал IOException e тогда нельзя переприсвоить e = new RuntimeException(); потому что это разные типы

CONCURRENCY 50%
* If a Thread is created with a Runnable, Thread class's run() method calls the run() method of the given Runnable.
  So you would expect it to execute Threader's run() method. However, Pooler is overriding Thread class's run() method and so the default behavior of Thread's run() is lost.
* One worker thread may steal work from another worker thread.
* volatile позаоляет видить переменную всем потокам, но не гарантируют атомарного поведения
* concurrentHashMap  не подддерживает null
* CyclicBarrier может быть сломан несколько раз
* Для полного Thread Safe нужна полная синхронизация чтения и записи
* обратить внимане на то чтоб всегда закрывался ExecutorService
* Consumer = (x) -> {}, Math.sqrt(x) но не return x; можно вставлять функцию возврат которой игнорируется
* Future.get(long, TimeUnit)
* ExecutorService.execute() returns void but not a Future!!!
* Если RecursiveAction зависает в рекурсии тогда можно получить StackOverflowError
* scheduleWithFixedDelay() accepts only Runnable
* если T compute() - тогда класс наследует RecursiveTask
* не бывает program hangs & run without issue
* new stream is always not parallel even if all streams in flatMap is parallel
* newSingleThreadExecutor() is thread safe ;)
* Нужно быть внимательнее когда блокируется this и static method - это разные объекты
* Concurrent tasks can share the same memory
* Сраный вопрос про возможные варианты возврата метода Integer performCount(int number) может вернуть число, null, exception или зависнуть нахуй! Че за пиздец!?
* CyclicBarrier.await() должен быть дернут разными потоками! Обратить внимание на количество потоков в ExecutorService

JAVA IO 82%
* Если класс имеет поле private static final long serialVersionUID = 1L; тогда при добавлении новых полей они будут инициализироваться дефортными значениями
  Но если этого поля нет, тогда оно будет генерироваться при каждом новом изменении класса(implementation, fields)
* File[] files = File.files();
* To serialize the object using the default behavior, you must call objectOutputStream.defaultWriteObject(); or objectOutputStream.writeFields();. This will ensure that instance fields of Portfolio object are serialized.
* To deserialize the object using the default behavior, you must call objectInputStream.defaultReadObject(); or objectInputStream.readFields();. This will ensure that instance fields of Portfolio object are deserialized.
* OutputStream.writeInt(99) нет такого метода
* Для кастомизации сериализации можно переопределить методы private void readObject и writeObject
* BufferedWriter не имеет метода writeUTF -> (ObjectOutputStream)
* Reader тоже имеет skip & mark
* mark(int readlimit) при привышении readlimit может ругаться, а может и нет
* натупил с mark() потому что не вчитывался в код
* Writer.append() ничего не запишет пока не вызовется метод flush()
* PrintWriter.append() not throws IOExceptions & Writer.append() throws IOExceptions
* All instance variables must be serializable OR TRANSIENT
* new File("D:/Java/OCP/Ch06_JavaIOFundamentals/src/main/java/OCP\\AppCopy.java")); при указании пути можно смешивать прямые и обратные слеши
* Console -> format() printf(), readLine(), readPassword()
* inputStream.mark() запоминает позицию, markLimit - непонятная хуйня :/
* ois.readObject() returns Object
* new BufferedInputStream(new FileReader(file)); -> ERROR
* java.io.File не поддерживает SymbolicLinc!!!

JAVA NIO.2 50%
* java.nio.file.NoSuchFileException: test.txt когда нет такого файла
* public static Path get(URI uri)
    IllegalArgumentException - if preconditions on the uri parameter do not hold. The format of the URI is provider specific.
    FileSystemNotFoundException - The file system, identified by the URI, does not exist and cannot be created automatically, or the provider identified by the URI's scheme component is not installed
    SecurityException - if a security manager is installed and it denies an unspecified permission to access the file system
* getRoot() на относительном пути дает null
* getRoot().getParent() возвращает null
* нельзя миксовать относительные и абсолютные пути в relativize()
* Path.relativize() считает . и .. как пути которые тоже нужно анигилировать в итоге получается хуйня
** path.relativize() принимает Path а не String
* Недопустим одиночный обратный слеш в пути "\"
* если метод описан полностью, тогда Files.copy() бросает Exceptions
* FileVisitResult = CONTINUE, TERMINATE, SKIP_SUBTREE, SKIP_SIBLINGS
* Paths.get("/a/b").getName(5) throw IllegalArgumentException
* Обратить внимание на PATHS VS PATH!!!
* Path is immutable
* путь Path обрабатывается поочереди вплоть до символических ссылок если /foo ссылка на /bar тогда /foo/1.txt = /bar/1.txt - the same file
* Attention to use BiPredicate in Files.walk().filter() instead of Predicate
* Изучить какие методы Files бросаются checked IOException (только isXXX не бросаются исключениями)
* Path.resolve(absolutePath) = absolutePath если передана абсолютный путь тогда вернет этот путь!!!
* Files.move()(Rename) всегда копирует атрибуты
* Если сказали что файл существует и доступен для чтения, значит чтение не бросит исключений, если нихера не сказано тогда может бросить исключение
* Path.normalize не преобразовует относительный путь в абсолютный, а только сокращает лишнее ".".normalize() = "."
* Files.find(Path, int, BiPredicate<Path, BasicFilterAttribute>) второй параметр - глубина

JDBC 90%
* 1. Call rs.moveToInsertRow(); first. You can't insert a row without calling this method first.
  2. Use rs.updateXXX methods to update all column values. You must set values for all the columns.
  3. Call rs.insertRow();
  4. Call rs.moveToCurrentRow(); to go back to the row where you were before calling moveToInsertRow.
  5. Call rs.updateRow(); If you call rs.refreshRow() without calling updateRow(), the updates will be lost.
* In JDBC 4.0, the drivers are loaded automatically based on the information provided by the driver's META-INF/services/java.sql.Driver file.
  Therefore, no java code in necessary to load the driver classes.
* The actual classes for Connection, Statement, and ResultSet interfaces are provided by the JDBC driver and are therefore driver dependent.
* Statement.setMaxRows(int) - Ограничивает количество считываемых строк
* поучить транзакции
* A JDBC API implementation must support Entry Level SQL92 plus the SQL command Drop Table.
* ResultSetMetaData gives you the information about the result of executing a query. You can retrieve this object by calling getMetaData() on ResultSet.
* A Connection is always in auto-commit mode when it is created.  As per the problem statement, an update was fired without explicitly disabling the auto-commit mode,
  the changes will be committed right after the update statement has finished execution.
* Проверить stmt.absolute() на SCROLL_FORWARD_ONLY работает, но previous() должен бросаться исключениями, хотя не бросается :/
* DriverManager.getConnection() throws SQLException
* Mandatory parts of JDBC URL is jdbc:vendorName:databaseSpecificName(ip & port is optional)
* con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY) не путать местами параметры

test1 70
test2 73
test3 65